{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# ----------------------------------------\n","# 🧠 AI Media Scheduler - Smart Daily Rotator + Dashboard + Data Science Features\n","# ----------------------------------------\n","# Supports: Audio 🎵, Video 🎮, PDF 📄 (with AI summaries)\n","# Platform: Google Colab / Python Script\n","# ----------------------------------------\n","\n","!pip install transformers PyPDF2 schedule matplotlib seaborn\n","\n","import os\n","import time\n","import schedule\n","import threading\n","from datetime import datetime, timedelta\n","import pandas as pd\n","from PyPDF2 import PdfReader\n","from transformers import pipeline\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from google.colab import drive\n","\n","# === SETUP ===\n","drive.mount('/content/drive')\n","user_folder = \"/content/drive/MyDrive/MediaSchedulerApp\"\n","os.makedirs(user_folder, exist_ok=True)\n","\n","# === AI MODEL ===\n","summarizer = pipeline(\"summarization\", model=\"t5-small\", tokenizer=\"t5-small\")\n","\n","# === MEDIA LIBRARY ===\n","# Replace with your real files\n","media_schedule = [\n","    {\"title\": \"Day 1\", \"path\": \"sample_audio1.mp3\", \"type\": \"audio\"},\n","    {\"title\": \"Day 2\", \"path\": \"sample_audio2.mp3\", \"type\": \"audio\"},\n","    {\"title\": \"Day 3\", \"path\": \"sample_audio3.mp3\", \"type\": \"audio\"},\n","    {\"title\": \"Day 4\", \"path\": \"sample_video.mp4\", \"type\": \"video\"},\n","    {\"title\": \"Day 5\", \"path\": \"sample_document.pdf\", \"type\": \"pdf\"},\n","]    # Add more items...\n","\n","\n","# === HISTORY LOG ===\n","media_log = []\n","\n","def log_action(item, result=\"Played\", summary=\"\", tags=[]):\n","    media_log.append({\n","        \"title\": item['title'],\n","        \"type\": item['type'],\n","        \"timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n","        \"result\": result,\n","        \"summary\": summary,\n","        \"tags\": \", \".join(tags)\n","    })\n","\n","def show_log():\n","    if not media_log:\n","        print(\"\\ud83d\\udcec No history yet.\")\n","    else:\n","        df = pd.DataFrame(media_log)\n","        display(df)\n","\n","# === AI PDF SUMMARIZER ===\n","def extract_pdf_text(file_path, max_pages=5):\n","    reader = PdfReader(file_path)\n","    text = \"\"\n","    for i, page in enumerate(reader.pages):\n","        if i >= max_pages:\n","            break\n","        page_text = page.extract_text()\n","        if page_text:\n","            text += page_text\n","    return text\n","\n","def summarize_pdf(file_path):\n","    text = extract_pdf_text(file_path)\n","    if len(text.strip()) < 100:\n","        return \"⚠️ PDF too short to summarize.\"\n","    input_text = text[:1000]\n","    summary = summarizer(input_text, max_length=100, min_length=30, do_sample=False)[0]['summary_text']\n","    return summary\n","\n","def extract_tags(summary):\n","    keywords = summary.lower().split()[:5]\n","    return list(set(keywords))\n","\n","# === PLAYBACK HANDLER ===\n","def handle_item(item):\n","    print(f\"\\n📅 Playing {item['title']} ({item['type']})\")\n","    if item['type'] == \"pdf\":\n","        summary = summarize_pdf(item['path'])\n","        tags = extract_tags(summary)\n","        print(\"\\n🧠 AI Summary:\\n\", summary)\n","        print(\"🏷️ Tags:\", tags)\n","        log_action(item, result=\"Summarized\", summary=summary, tags=tags)\n","    else:\n","        print(f\"🎵 Simulated Playing: {item['path']}\")\n","        for i in range(3):\n","            print(f\"...playing ({i+1}/3)\")\n","            time.sleep(1)\n","        print(\"✅ Finished\")\n","        log_action(item, result=\"Played\")\n","\n","# === DAILY ROTATION LOGIC ===\n","start_date = datetime(2025, 6, 19)  # Change to your starting day\n","\n","def get_today_index():\n","    delta_days = (datetime.now().date() - start_date.date()).days\n","    return delta_days if delta_days < len(media_schedule) else None\n","\n","def daily_task():\n","    idx = get_today_index()\n","    if idx is None:\n","        print(\"✅ All scheduled files have been played.\")\n","    else:\n","        handle_item(media_schedule[idx])\n","\n","# === SCHEDULER ===\n","schedule.clear()\n","schedule.every(1).minutes.do(daily_task)  # Use `.day.at('08:00')` for real time\n","\n","print(\"📡 Scheduler set. Will run every minute (demo mode).\")\n","\n","def run_scheduler():\n","    while True:\n","        schedule.run_pending()\n","        time.sleep(1)\n","\n","threading.Thread(target=run_scheduler).start()\n","\n","# === DASHBOARD ===\n","def show_dashboard():\n","    if not media_log:\n","        print(\"📅 No activity to show.\")\n","        return\n","    df = pd.DataFrame(media_log)\n","    df['timestamp'] = pd.to_datetime(df['timestamp'])\n","    df['date'] = df['timestamp'].dt.date\n","    plt.figure(figsize=(12,6))\n","    sns.countplot(data=df, x='date', hue='type')\n","    plt.title(\"📊 Media Summary by Date\")\n","    plt.xlabel(\"Date\")\n","    plt.ylabel(\"Count\")\n","    plt.xticks(rotation=45)\n","    plt.grid(True)\n","    plt.tight_layout()\n","    plt.show()\n","\n","# === DATA SCIENCE EXTRAS ===\n","def summary_stats():\n","    if not media_log:\n","        print(\"ℹ️ No data available.\")\n","        return\n","    df = pd.DataFrame(media_log)\n","    df['timestamp'] = pd.to_datetime(df['timestamp'])\n","    print(\"📊 Summary Stats:\")\n","    print(\"- Total sessions:\", len(df))\n","    print(\"- Unique days used:\", df['timestamp'].dt.date.nunique())\n","    print(\"- Media breakdown:\\n\", df['type'].value_counts())\n","\n","def calculate_streak():\n","    df = pd.DataFrame(media_log)\n","    if df.empty:\n","        print(\"🔥 Current streak: 0 days\")\n","        return\n","    df['date'] = pd.to_datetime(df['timestamp']).dt.date\n","    df = df.drop_duplicates('date')\n","    streak = 0\n","    today = datetime.today().date()\n","    for i in range(len(df)):\n","        if (today - timedelta(days=i)) in df['date'].values:\n","            streak += 1\n","        else:\n","            break\n","    print(f\"🔥 Current streak: {streak} days\")\n","\n","def recommend_next_type():\n","    df = pd.DataFrame(media_log)\n","    if df.empty:\n","        print(\"🤖 Start with any type you like!\")\n","    else:\n","        print(\"🤖 Recommended type based on usage:\", df['type'].mode()[0])\n","\n","def export_usage():\n","    if not media_log:\n","        print(\"ℹ️ No log to export.\")\n","        return\n","    df = pd.DataFrame(media_log)\n","    export_path = f\"{user_folder}/media_usage_log.csv\"\n","    df.to_csv(export_path, index=False)\n","    print(f\"✅ Log saved to: {export_path}\")\n","\n","# === Optional: Run these anytime ===\n","# show_log()\n","# show_dashboard()\n","# summary_stats()\n","# calculate_streak()\n","# recommend_next_type()\n","# export_usage()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oDr5McVS0HjB","executionInfo":{"status":"ok","timestamp":1750371578975,"user_tz":-60,"elapsed":8603,"user":{"displayName":"Abubakar Saleh Adam","userId":"12756404367713883678"}},"outputId":"c8ceff07-1456-45e8-d7a3-1319e367a511"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.52.4)\n","Requirement already satisfied: PyPDF2 in /usr/local/lib/python3.11/dist-packages (3.0.1)\n","Requirement already satisfied: schedule in /usr/local/lib/python3.11/dist-packages (1.2.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.33.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n","Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n","Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.4)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\n","Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.11/dist-packages (from seaborn) (2.2.2)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (2025.3.2)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (4.14.0)\n","Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (1.1.3)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.6.15)\n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"output_type":"stream","name":"stderr","text":["Device set to use cpu\n"]},{"output_type":"stream","name":"stdout","text":["📡 Scheduler set. Will run every minute (demo mode).\n"]}]},{"cell_type":"code","source":["show_log()\n","show_dashboard()\n","summary_stats()\n","calculate_streak()\n","recommend_next_type()\n","export_usage()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":544},"id":"3eR8jUam1XZL","executionInfo":{"status":"ok","timestamp":1750371649359,"user_tz":-60,"elapsed":1112,"user":{"displayName":"Abubakar Saleh Adam","userId":"12756404367713883678"}},"outputId":"7da85a43-b692-4ebf-9e12-c6933c4fb348"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["   title   type            timestamp  result summary tags\n","0  Day 1  audio  2025-06-19 22:20:42  Played             \n","1  Day 1  audio  2025-06-19 22:20:42  Played             "],"text/html":["\n","  <div id=\"df-5c1b8c31-7547-4238-bc24-fc18f5f95c7b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>title</th>\n","      <th>type</th>\n","      <th>timestamp</th>\n","      <th>result</th>\n","      <th>summary</th>\n","      <th>tags</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Day 1</td>\n","      <td>audio</td>\n","      <td>2025-06-19 22:20:42</td>\n","      <td>Played</td>\n","      <td></td>\n","      <td></td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Day 1</td>\n","      <td>audio</td>\n","      <td>2025-06-19 22:20:42</td>\n","      <td>Played</td>\n","      <td></td>\n","      <td></td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c1b8c31-7547-4238-bc24-fc18f5f95c7b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5c1b8c31-7547-4238-bc24-fc18f5f95c7b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5c1b8c31-7547-4238-bc24-fc18f5f95c7b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-8dbd6132-2783-422a-9291-b7e172f6874a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8dbd6132-2783-422a-9291-b7e172f6874a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-8dbd6132-2783-422a-9291-b7e172f6874a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"export_usage()\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Day 1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"audio\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2025-06-19 22:20:42\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"result\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Played\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"summary\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tags\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-4-622726474.py:144: UserWarning: Glyph 128202 (\\N{BAR CHART}) missing from font(s) DejaVu Sans.\n","  plt.tight_layout()\n","/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 128202 (\\N{BAR CHART}) missing from font(s) DejaVu Sans.\n","  fig.canvas.print_figure(bytes_io, **kw)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["📊 Summary Stats:\n","- Total sessions: 2\n","- Unique days used: 1\n","- Media breakdown:\n"," type\n","audio    2\n","Name: count, dtype: int64\n","🔥 Current streak: 1 days\n","🤖 Recommended type based on usage: audio\n","✅ Log saved to: /content/drive/MyDrive/MediaSchedulerApp/media_usage_log.csv\n"]}]}]}